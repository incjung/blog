---
title: "Emacs My Startup Page"
date: 2024-12-24T10:05:07+13:00
draft: false
---

* 나만의 시작 화면 
emacs 를 시작 하면 기본으로 보여지는 시작 화면이 있다. emace 로고, 소개글과 함께 링크들이 보여진다. 습관적으로 키고 끄다 보니 별 문제 없이 사용하지만, 반복되는 나만의 패턴이 생기게 된다. 그 중에 하나는 항상 시작 화면에 내가 원하는 내용이 띄어지면 좋겠다는 생각을 하게 됐다.

나만의 시작화면을 띄우기 위해서는, 우선 기 기본 화면이 안나오게 해야 한다.
관련 변수가 ~inhibit-startup-screen~ and ~emacs-strtup-hook~ 이다.
- ~inhibit-startup-screen~: This is for use in your personal init file. Original value was nil, Non-nil inhibits the startup screen.
- ~emacs-strtup-hook~: Normal hook run after loading init files and handling the command line.
hook 변수는 ~add-hook~ 함수로 init file에서 걸어주어야 한다.

* 나의 시작화면
내 경우는 처음 emacs를 띄우자 마자 거의 ~org-agenda-list~ 를 띄워 스케쥴이나 나의 할일들을 확인한다. 그리고 중간중간 완료한 작업을 표시하거나 필요하면 새로운 작업 타스크들을 추가 한다. 보통은 새로운 뭔가를 추가하는 것 보다는 항상 잊지 말아야 할 것을 리만인드 해주기 때문에 자주 agenda buffer를 자주 불러와 보곤 한다.

그래서 나의 시작화면으로 ~org-agenda-list~ 를 띄우기로 결정했다. 여기서 약간의 기본 agenda-list의 옵션을 바꿔준다. 기본 일주일 리스트를 보여주지만 나는 4일의 리스트를 보이기로 결정했다. 이는  ~org-agenda-span~ 를 고쳐주면 된다. Original value was 'week'. 

추가로 나는 ~calendar~ 를 함께 보여주기로 했다. 그러면 코드는 이렇게 된다. 

#+begin_src elisp 
  (setq org-agenda-span 4)
  (setq inhibit-startup-screen t)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (let ((buffer-agenda "*Org Agenda*")
                    (buffer-calendar "*Calendar*"))
                (org-agenda-list)
                (delete-other-windows)
                (calendar))))
#+end_src

간단히 코드 설명을 해보면, 
When ~inhibit-startup-screen~ is not nil, you can define your own start up screen. with ~emacs-startup-hook~, you can compose your buffers which are org-agendar-list and calendar in my case.

FYI, ~delete-other-windows~ is to delete the current buffer. Becasue the agendar-list and calendar buffers are created on current buffer, you need to delete the first buffer once you create agendar buffer or calendar buffer.

* 더 Custom
조금 더 내 입맛에 맞게 org-agend-list를 띄우려면, ~org-agenda-custom-commands~ 변수를 바꿔줘야 한다.

It's entryes will be like  ~(key desc type match settings files)~

- key: The key (one or more characters as a string) to be associated with the command.
- desc: A description of the command.  When omitted or nil, a default description is built using MATCH.
- type: The command type, any of the following symbols: agenda/agenda*/todo/search/tags/...
- match:   What to search for
- settings:  A list of option settings, similar to that in a let form, so like this: ((opt1 val1) (opt2 val2) ...). The values will be evaluated at the moment of execution, so quote them when needed.


#+begin_src elisp
  (setq org-agenda-custom-commands
      '(("o" "All My Work Tasks"
         ((agenda "" ((org-agenda-span 1)
                      (org-agenda-prefix-format "%t %s")
                      (org-agenda-files '("~/orgmode/agenda/habit.org"))
                      (org-agenda-overriding-header "My Habits\n------------------\n")))
          (agenda "" ((org-agenda-span 3)
                  (org-agenda-files '("~/orgmode/agenda/work.org"))
                  (org-agenda-overriding-header "Work Tasks\n------------------\n")))))))
#+end_src

- ~(org-agenda-files '("~/orgmode/agenda/habit.org"))~: target org file
- ~(org-agenda-prefix-format "%t %s")~: show only TODO and content
- ~(org-agenda-overriding-header "My Habits\n------------------\n")~: change the ugly default header title
 
수많은 ~org-agenda-*~ 변수들을 어떻게 다 찾을 수 있는지는 의문이다. Honestly, I am not sure where I can find all the settings. I tried to read the org-mode info. it's not enough to know all. Maybe it's time to dig in the source code but not yet for me. 


이제 M-x org-agenda > "o" 해보자. 원하는 모습의 Agenda 화면이 나왔는지 확인하면 된다.

그래서, My final elisp :
#+begin_src elisp
  (add-hook 'emacs-startup-hook
          (lambda ()
            (let ((buffer-agenda "*Org Agenda*")
                  (buffer-calendar "*Calendar*"))
              (org-agenda "" "o")
              (delete-other-windows)
              (calendar))))
#+end_src
  
