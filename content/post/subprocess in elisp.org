---
title: "Subprocess in Elisp"
date: 2025-05-29T10:48:01+12:00
draft: false
---
A couple of weeks, I jut down how to integrate outlook scheduler into *org-agenda*. For some reasons, I had to make it with python code and I have been calling whenever I realized my agenda stale - open my terminal and run the code.

Well, it's not bad actually, but I was curious if I can integrate the process within ~emacs~. (sure thing thought) but I forgot it soon as always. I know google listening me, some day, it happened my youtube suggesting a lisp episode about ~make-process~ elisp function.

#+begin_example
(make-process &rest ARGS)

Start a program in a subprocess.  Return the process object for it.

This is similar to ‘start-process’, but arguments are specified as
keyword/argument pairs.  The following arguments are defined:

:name NAME -- NAME is name for process.  It is modified if necessary
to make it unique.

:buffer BUFFER -- BUFFER is the buffer (or buffer-name) to associate
with the process.  Process output goes at end of that buffer, unless
you specify a filter function to handle the output.  BUFFER may be
also nil, meaning that this process is not associated with any buffer.

:command COMMAND -- COMMAND is a list starting with the program file
name, followed by strings to give to the program as arguments.  If the
program file name is not an absolute file name, ‘make-process’ will
look for the program file name in ‘exec-path’ (which is a list of
directories).
#+end_example

It looks exactly like my wish-function, I can't wait to apply it to my script.
#+begin_src elisp
  (defun my-outlook-schedule ()
    "my outlook schedule"
    (interactive)
    (make-process
     :name "myoutlook"
     :buffer "*myoutlook*"
     :command '("my-outlook-calendar-into-orgagendar.sh")))
#+end_src

This will complete my request in background. how cool!

I also found a good elisp function like linux ~crontab~ which is elisp function ~run-at-time~. it can set repeat job with timer. I don't have plan to apply it for my scheduler pulling yet. Oneday I will use it for another use. let me think about it. 
