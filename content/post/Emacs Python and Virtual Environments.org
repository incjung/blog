---
title: "Emacs, Python, and Virtual Environments: A Productive Workflow"
date: 2025-06-23T14:25:22+12:00
draft: false
---

Emacs is a fantastic environment for coding, and Python is a powerful and versatile language. Combining the two, along with virtual environments, creates a productive workflow for Python development. This post will guide you through setting up Emacs with Python in a virtual environment, leveraging =direnv= for automatic environment management, and integrating Jupyter notebooks for interactive exploration.

** Managing Python Environments with =direnv=

When working on multiple Python projects, each with its own dependencies, virtual environments are essential. =direnv= automatically loads and unloads environment variables based on the current directory. This is incredibly useful for managing virtual environments seamlessly within Emacs.

*** Installing and Configuring =direnv=

First, install =direnv= on your system. The installation process varies depending on your operating system.  Refer to the official =direnv= documentation for detailed instructions: [https://direnv.net/](https://direnv.net/).

Once installed, you need to integrate it into your shell.  Typically, this involves adding a line to your shell's configuration file (e.g., =.bashrc=, =.zshrc=).  =direnv='s website has great instructions for this.

Now, let's see a simple example.  Create a directory for a new project and a =.envrc= file:

#+begin_src bash
$ mkdir my_python_project
$ cd my_python_project
$ echo export FOO=foo > .envrc
direnv: error /path/to/my_python_project/.envrc is blocked. Run `direnv allow` to approve its content
#+end_src

=direnv= detected a new =.envrc= file and, for security reasons, requires explicit approval before loading it.

#+begin_src bash
$ direnv allow .
direnv: loading /path/to/my_python_project/.envrc
direnv: export +FOO
$ echo ${FOO-nope}
foo
#+end_src

Now, the environment variable =FOO= is set whenever you're in the =my_python_project= directory, and unset when you leave it!

*** Integrating =direnv= with Emacs

To automatically activate =direnv= within Emacs, use the =direnv= package. Add the following to your =init.el= (or equivalent configuration file):

#+begin_src elisp
;; https://github.com/wbolster/emacs-direnv
(use-package direnv
  :ensure t
  :config
  (direnv-mode))
#+end_src

This code snippet uses =use-package= (which assumes you have =package.el= configured) to install and configure the =direnv= package.  =:ensure t= makes sure that the package is installed if it's not already.  =(direnv-mode)= enables =direnv-mode= globally, so it will be active in all buffers.

*** Automatically Activating Virtual Environments with =direnv=

To automatically activate a Python virtual environment when you enter a project directory, add the following to your =.envrc= file:

First, create a virtual environment in your project directory:

#+begin_src bash
$ python3 -m venv .venv
#+end_src

Then, add the following line to your =.envrc= file:

#+begin_src bash
echo ". .venv/bin/activate" >> .envrc
#+end_src

Remember to run =direnv allow .= after modifying the =.envrc= file.

Now, whenever you enter the project directory (in your shell or in Emacs), the virtual environment will be automatically activated. When you leave the directory, the environment will be deactivated. This ensures that you're always using the correct Python environment for your project.

** Setting Up Jupyter in Emacs

Jupyter notebooks provide an interactive environment for data exploration and analysis. Integrating Jupyter with Emacs allows you to take advantage of Emacs's powerful editing and organizational features while working with notebooks.

*** Installing the =jupyter= Package

To use Jupyter within Emacs, you'll need the =jupyter= package. Add the following to your =init.el=:

#+begin_src elisp
(use-package jupyter
  :ensure t
  :config
  (setq jupyter-repl-echo-eval-p t))
#+end_src

This installs the =jupyter= package and sets the =jupyter-repl-echo-eval-p= variable to =t=. This makes results from evaluating code blocks show up in the minibuffer.

*** Creating Jupyter Kernels

A Jupyter kernel is a computational engine that executes the code in your notebook. You need to create a kernel for each virtual environment you want to use with Jupyter.

To create a kernel, activate the virtual environment and run the following command:

#+begin_src bash
$ python3 -m ipykernel install --user --name "my-project-kernel" --display-name "My Project Kernel"
#+end_src

Replace ="my-project-kernel"= with a unique name for your kernel and ="My Project Kernel"= with a descriptive display name.  The =--user= flag installs the kernel for the current user.  This is the typical approach in a virtualenv.

For example:

#+begin_src bash
$ python3 -m ipykernel install --user --name "google-test" --display-name "google-test"
Installed kernelspec google-adk1 in /home/<username>/.local/share/jupyter/kernels/google-test
#+end_src

Now you can select this kernel when you open a Jupyter notebook in Emacs.  Within the =jupyter= buffer, use =C-c C-k= to choose your kernel.

** Conclusion

By combining Emacs, Python, =direnv=, and Jupyter, you can create a powerful and efficient development environment. =direnv= automates virtual environment management, ensuring that you're always using the correct dependencies for your project. The =jupyter= package integrates Jupyter notebooks seamlessly into Emacs, allowing you to leverage Emacs's editing and organizational features while exploring data and developing your code. This combination provides a productive and enjoyable Python development experience within Emacs.
