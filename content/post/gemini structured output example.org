---
title: "Gemini Structured Output Example"
date: 2025-04-08T14:05:28+12:00
draft: false
---
In this blog post, I'll explore how to leverage Google's Gemini model to generate structured content for a specific task, especially,about detailing the manual installation process of Ezmeral Data Fabric on Red Hat Enterprise Linux (RHEL).

For that, I'll use the =google.generativeai= library (specifically, the =genai= module) to interact with the Gemini API and request structured output in JSON format, conforming to a predefined schema using =Pydantic=.

** Benefits of Structured Output
- *Data Validation:* Pydantic ensures that the output conforms to the expected schema, preventing errors.
- *Easy Data Access:*  The =response.parsed= attribute provides a Python list of objects, making it easy to access the generated content programmatically.
- *Content Generation Automation:*  You can automate the creation of documentation, blog posts, or other content based on the structured output from Gemini.
- *Improved Prompt Engineering:* By defining the output schema, you provide Gemini with clear instructions on how to structure its response, leading to more consistent and predictable results.


This example demonstrates the power of Gemini in generating structured output for complex tasks. By combining Gemini's language generation capabilities with Pydantic's data validation, you can create robust and automated content generation workflows. This approach is particularly useful for creating documentation, generating reports, and other tasks where structured data is essential. Remember to tailor the prompt and Pydantic model to your specific needs for optimal results.

** My goal is to create a detailed guide for manually installing Ezmeral Data Fabric on RHEL 8.8 by LLM, gemini like:

#+begin_example
   **Prerequisites:**  Checking system requirements and dependencies.
   **Core Package Installation:** Installing the necessary software components.
   **Monitoring Stack Setup:** Configuring tools for monitoring the data fabric.
   **MOSS Configuration:** Setting up the MapR Object Storage Service (MOSS) for general user access and providing usage instructions.
#+end_example

** code

#+begin_src python
  from google import genai
  from google.genai import types

  import pathlib
  import httpx

  from typing import Optional
  from pydantic import BaseModel, Field


  class C1(BaseModel):
      content: str = Field(..., description='''
      This is a describing section about install Ezmeral data fabric. You will install Ezmeral data fabric on RHEL8.8. You must know how to check prerequsites and install core packages alone with Monitoring stack. You must configure MOSS for general user and show the procedure about MOSS usages.  Make this long and details
      ''')
      script: Optional[str] = Field(..., description="optional bash script for installing ezmeral datafabric")

  def main():
      client = genai.Client(api_key="......")
      doc1= 'maprdoc_part_1.pdf'
      filepath1 = pathlib.Path(doc1)
      response = client.models.generate_content(
          model='gemini-2.0-flash',
          contents=['Generate contents as you can make it details. Explain how we can install Ezmeral Data Fabric in manual installation way on RHEL?', 
                    types.Part.from_bytes(
                        data=filepath1.read_bytes(),
                        mime_type='application/pdf',
                    )],
          config={
              'response_mime_type': 'application/json',
              'response_schema': list[C1]
          },
      )
      print(response.text)
      my_report: list[C1] = response.parsed
      print(my_report)
  if __name__ == "__main__":
      main()        
#+end_src



** Code Walkthrough

1.  Import Statements
    - =google.generativeai=: The core library for interacting with Gemini.
    - =pathlib=: For handling file paths.
    - =typing.Optional=:  For defining optional fields in our Pydantic model.
    - =pydantic.BaseModel=, =pydantic.Field=: For defining the data structure of the expected output.

2.  *=C1= Pydantic Model:*
    #+begin_src python
      class C1(BaseModel):
      content: str = Field(..., description='''
      This is a describing section about install Ezmeral data fabric. You will install Ezmeral data fabric on RHEL8.8. You must know how to check prerequsites and install core packages alone with Monitoring stack. You must configure MOSS for general user and show the procedure about MOSS usages.  Make this long and details
      ''')
      script: Optional[str] = Field(..., description="optional bash script for installing ezmeral datafabric")
    #+end_src

    - This model defines the structure of each content section that Gemini will generate.  It has two fields:
      - =content= (str, required): A detailed description of a specific aspect of the Ezmeral Data Fabric installation. The =description= argument within =Field= provides Gemini with instructions on what the content should cover.
      - =script= (Optional[str], optional):  An optional bash script related to the installation step described in the =content= field.  Marked as =Optional=, meaning it's not always required in the output.

3.  =main()= Function:
    - *Initialization:*  Creates a =genai.Client= instance, authenticating with your API key. **Important:** Replace ="YOUR_API_KEY"= with your actual Gemini API key.  It also specifies the file path to =maprdoc_part_1.pdf= which acts as a supporting document.
    - =generate_content=:  This is where the magic happens.  It calls the =generate_content= method on the Gemini model:
       - Specifies the Gemini model to use (e.g., 'gemini-2.0-flash', 'gemini-2.0-pro').
       - =contents=: A list containing the prompt and the supporting document. The prompt instructs Gemini to generate detailed content about the Ezmeral Data Fabric installation. The supporting document is passed as bytes with the correct MIME type ('application/pdf').
       - =config=:  A dictionary specifying the configuration for the response:
          - =response_mime_type=:  Tells Gemini to format the output as JSON.
          - =response_schema=list[C1]=:  Crucially, this tells Gemini to structure the JSON output according to the =C1= Pydantic model.  The =list[C1]= indicates that we expect a list of =C1= objects.
    - *Response Handling:*
        -   =print(response.text)=: Prints the raw JSON response from Gemini. This can be helpful for debugging.
        -   =my_report: list[C1] = response.parsed=:  This is the key step.  The =response.parsed= attribute automatically parses the JSON response and converts it into a list of =C1= objects, thanks to the =response_schema= configuration.
        -   =print(my_report)=:  Prints the parsed =my_report= list. You can then iterate over this list and access the =content= and =script= attributes of each =C1= object.

** The script will print two things:

1.  The raw JSON response from Gemini. This will be a JSON array of objects, where each object corresponds to a =C1= instance.
2.  A Python list of =C1= objects.  You can then work with this list in your code, accessing the =content= and =script= attributes to generate your blog post or documentation.


#+begin_src bash
[C1(content="Detailed explanation of prerequisites...", script="Optional bash script for prerequisites..."), C1(content="Instructions for core package installation...", script="Bash script for installing packages..."), ...]
#+end_src

