---
title: "Learning Go lang - side project - time zone converter"
date: 2024-09-25T10:34:36+12:00
draft: false
---

* 왜?
일을 하다 종종 시간대가 다른 사람들과 일을 하게 된다. 가까운 나라라면 대충 시간을 계산해서 알 수가 있지만, 조금만 멀어져도 콜약속을 잡을 때면, 구글로 상대방의 시간대와 나의 시간대를 검색해서 약속을 잡곤 한다.

원래 두세번 이상 같은 일을 한다면, 자동화할 가치가 있는 것이지만, 그 동안의 관성대로 그냥 그렇게 살고 있다가 이번기회에 만들어보려고 한다.

* 어떻게?
사실 내가 직접 UTC시간을 기준으로 계산을 할 필요는 전혀 없다. 이미 만드어져 있는 라이브러리를 그냥 이용하면 되는 것이다. =Go= 언어는 이미 기본 라이브러리로 포함되어 있기 때문에 그냥 불러 쓰기만 하면된다.

필요한 패키지는 =time= 이면 충분하다. =LoadLocation= 이라는 함수가 timezone에 대한 모든 것을 해결해 주기 때문이다.

#+begin_src go
  package main

  import (
          "fmt"
          "os"
          "time"
  )

  func main() {

          if len(os.Args) < 2 {
                  fmt.Println("argurments length: ", len(os.Args))
                  fmt.Println("ex) Asia/Seoul", len(os.Args))
                  os.Exit(1)
          }

          nowTime := time.Now()
          myLocation := nowTime.Location()

          fmt.Printf("Current Time: %s (%s)\n", nowTime.Format(time.RFC1123), myLocation)

          //targetZone, err := time.LoadLocation("Asia/Seoul")
          targetZone, err := time.LoadLocation(os.Args[1])
          if err != nil {
                  fmt.Printf("Cannot find the target location/zone (%s). Check your target zone name\n", os.Args[1])
                  os.Exit(1)

          }
          targetTime := nowTime.In(targetZone)

          fmt.Printf("Converted Time: %s (%s)\n", targetTime.Format(time.RFC1123), targetZone)
  }
#+end_src

아웃풋은 다음과 같다. 
#+begin_src bash
  $ go run *.go Asia/Seoul
  Current Time: Wed, 25 Sep 2024 10:33:16 NZST (Local)
  Converted Time: Wed, 25 Sep 2024 07:33:16 KST (Asia/Seoul)
#+end_src

기본으로 현재 타임존을 원하는 시간 존으로 바꾸는 것이다. 그런데 =IANA Time Zone= 이름을 알고 있어야 한다. 모든 나라의 IANA(Internet Assigned Numbers Authority) 이름을 알고 있는 사람은 없을 것 같다. 나의 경우, 구글로 나라 이름과 시간존을 검색한다. 어딘가에 그런 매핑 정보가 있겠지하고 검색해보고니 https://timezonedb.com/time-zones 에 이쁘게 매핑을 해놓은 테이블이 있었다. 그래서 파일에 저장을 다음과 같이 하고 나중에 찾아 쓰면 된다. 

#+begin_src bash
  $ head zonedb.txt 
  AF      Afghanistan     Asia/Kabul      UTC +04:30
  AL      Albania Europe/Tirane   UTC +02:00
  DZ      Algeria Africa/Algiers  UTC +01:00
  AS      American Samoa  Pacific/Pago_Pago       UTC -11:00
#+end_src

* 좀더 편하게
이제 나라 이름을 먼저 찾고 타임존을 검색하고 이를 넣으면 된다. 이제 로직 부분은 끝났으나 사용 *편의성* 을 고려해야할 차례이다. 나라이름을 알면 매핑되는 타임존을 가져오고 그 타임존을 개발한 프로그램의 인자값으로 넣어주면 된다. 역시나 나는 =emacs= 를 주 인터페이스로 사용하고 있으니, 바로 불러 올 수 있게 간단히 스크립을 만들었다.

#+begin_src elisp
  (defun my-time-zone ()
    "my timezone converter
  refer https://timezonedb.com/time-zones"
    (interactive)
    (let* ((tzcmd "myTransTimeZone") ;; this is my timezone converter by Go
           (tloc
            (nth 2 (split-string (completing-read "TimeZone: "
                   (with-temp-buffer
                     (insert-file-contents "zonedb.txt") ;; this is the mapping file of timezone and country
                     (split-string (buffer-string) "\n" t))) "\t"))))
      (message (string-trim
                (with-temp-buffer
                  (call-process tzcmd nil t nil tloc)
                  (buffer-string))))))
#+end_src

=my-time-zone= 를 실행하면 =timdb.txt= 에서 나라이름이나 존이름을 찾고 선택을 하면 그중에서 타임존만 뽑아 와서 인자로 넘겨주면 된다. :)



