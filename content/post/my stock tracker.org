---
title: "My Finance Tracker: Your Command-Line Stock Analyzer"
date: 2025-09-21T19:19:31+12:00
draft: false
---
* Introduction

Are you interested in tracking the performance of your favorite stocks without the noise of a full-fledged trading platform? Look no further! My Finance Tracker is a simple, efficient, and customizable command-line tool designed to give you a quick snapshot of stock performance based on historical data from Yahoo Finance.

* What is  Finance Tracker?

The My Finance Tracker is a lightweight application written in Go that fetches stock data from Yahoo Finance and performs basic performance analysis. It's perfect for quickly checking how your chosen stocks are doing, identifying potential selling points, and understanding recent price fluctuations.

* Key Features:

- Historical Data: Fetches the last 6 months of daily stock data from Yahoo Finance.
- Performance Metrics: Calculates key metrics like price drop percentages from recent highs (5-day, 10-day, 30-day, and 6-month).
- Warning Flag: Flags stocks that have dropped more than 10% from their 6-month high, providing a quick visual indicator of potential concerns.
- Concurrent Data Fetching: Uses Go's concurrency features to fetch data for multiple stocks simultaneously, significantly speeding up the analysis process.
- Clean Output: Presents the results in a well-formatted, tabular console output for easy readability.
- Customizable: Easily modify the list of tracked stocks to match your personal portfolio or watchlist.

* Why Use a Command-Line Tool?

While numerous online platforms and apps offer stock tracking features, a command-line tool provides several advantages:

- Simplicity: No complex UI or overwhelming features. Just the data you need, presented clearly.
- Speed: Quickly retrieve and analyze data without waiting for web pages to load or navigate through complex menus.
- Automation: Easily integrate the tool into scripts for automated monitoring and reporting.
- Control: Full control over the data and analysis, without relying on third-party interpretations.

* Getting Started:

**Requirements:**

- Go version 1.21 or later.

**Installation and Usage:**

1.  Clone or download the project: Grab the source code from [[https://github.com/incjung/myFinanceGo.git]].

2.  Navigate to the project directory: Use your terminal to enter the project folder.

3.  Run the application:

   #+BEGIN_SRC bash
   go run main.go
   #+END_SRC

   Alternatively, you can compile the code to create an executable:

   #+BEGIN_SRC bash
   go build -o mystock main.go
   #+END_SRC
   Then run it using:
   #+BEGIN_SRC bash
   ./mystock
   #+END_SRC

* Understanding the Output:

After running the command, you'll see a table similar to this:

#+BEGIN_EXAMPLE
Fetching data for symbols...
--- Analysis Complete ---
|  NAME|  Price|last05d|drop05d|last10d|drop10d|last30d|drop30d|last6mo|drop6mo|  sell?|
|CEN.NZ|   2.55|   2.59|  -1.54|   2.64|  -3.41|   2.88| -11.46|   3.06| -16.67|   true|
|FNZ.NZ|   1.90|   1.91|  -0.52|   1.91|  -0.52|   1.95|  -2.56|   2.04|  -6.86|  false|
|FSF.NZ|   0.68|   0.68|   0.00|   0.69|  -1.45|   0.70|  -2.86|   0.79| -13.92|   true|
|SPK.NZ|   4.44|   4.44|   0.00|   4.52|  -1.77|   4.52|  -1.77|   4.92|  -9.76|  false|
|VOD.NZ|   0.71|   0.72|  -1.39|   0.73|  -2.74|   0.76|  -6.58|   0.84| -15.48|   true|
#+END_EXAMPLE

Let's break down what each column represents:

- NAME: The stock ticker symbol (e.g., ~CEN.NZ~, ~AAPL~).
- Price: The current stock price.
- last05d, last10d, last30d, last6mo: The highest price reached in the last 5 days, 10 days, 30 days, and 6 months, respectively.
- drop05d, drop10d, drop30d, drop6mo: The percentage drop from the respective high to the current price.
- sell?: A boolean flag indicating whether the stock has dropped more than 10% from its 6-month high. ~true~ suggests a potential sell signal based on this simple criterion.

* Customizing the Stock List:

To track your own selection of stocks, simply modify the ~myInterestSymbols~ slice in the ~main()~ function within ~main.go~. Replace the existing symbols with the Yahoo Finance ticker symbols you want to follow:

#+BEGIN_SRC go
// main.go

func main() {
    // Add or remove Yahoo Finance ticker symbols here
	myInterestSymbols := []string{"FSF.NZ", "FNZ.NZ", "CEN.NZ", "SPK.NZ", "VOD.NZ", "AAPL", "GOOG"}

    // ... rest of the code
}
#+END_SRC

Save the changes and re-run the application.

* Emacs Integration: (Bonus!)

For Emacs users, the following code snippet can be added to your Emacs configuration to easily run the stock tracker and display the output in a buffer:

#+BEGIN_SRC emacs-lisp
(defun my-stock-buffer ()
  "My Interesting Stocks Popup"
  (interactive)
  (let ((stock-buffer "*My Stocks*"))
    (with-output-to-temp-buffer stock-buffer
      (shell-command "/path/to/your/mystock" stock-buffer))  ; Replace with your actual path
    (pop-to-buffer stock-buffer)))
#+END_SRC

Replace ~/path/to/your/mystock~ with the correct path to the compiled executable or script. You can then bind this function to a key combination for quick access.

* Disclaimer:

This tool is for informational purposes only and should not be considered financial advice. Investing in the stock market involves risk, and you should always consult with a qualified financial advisor before making any investment decisions. The "sell?" flag is a simple indicator and should not be the sole basis for any trading decisions.

* Conclusion:

The My Finance Tracker provides a simple, efficient, and customizable way to monitor stock performance from the command line. Its ease of use, speed, and clear output make it a valuable tool for anyone interested in tracking their investments or analyzing market trends. Give it a try and see how it can help you stay informed about your stocks!


