---
title: "My Emacs Init 20221108"
date: 2022-11-18T21:44:17+08:00
draft: false
---

* updated init
There are some updates of my emacs =init= such as google search and open new frame

** google search 
#+begin_src emacs-lisp
  (require 'browse-url) ; part of gnu emacs

  (defun my-lookup-mapr ()
    "Look up the word under cursor in google mapr sites. This command switches to browser."
    (interactive)
    (let (word)
      (setq word
            (if (use-region-p)
                (buffer-substring-no-properties (region-beginning) (region-end))
              (current-word)))
      (setq word (replace-regexp-in-string " " "+" word))

      ;;(browse-url (concat "http://en.wikipedia.org/wiki/" word))
      (browse-url (concat "https://www.google.com/search?q=site%3Adocs.datafabric.hpe.com%2F71+" word))
      ;; (eww myUrl) ; emacs's own browser
      ))
  (global-set-key (kbd "<f9>") 'my-lookup-mapr)
#+end_src


** pop up new frame
#+BEGIN_SRC emacs-lisp
  ;;(setq pop-up-frames t)
  (global-set-key (kbd "C-o") 'other-frame)
  (global-set-key (kbd "<f10>") 'make-frame-command)
#+END_SRC

* my entire init

** General
*** Repository
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "https://melpa.org/packages/")
   t)
#+END_SRC
*** initial window and default window
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)

  (setq default-frame-alist
        (if (display-graphic-p)
            '((tool-bar-lines . 0)
              ;;(background-color . "honeydew")
              (width . 100)
              (height . 46))
          '((tool-bar-lines . 0))))
#+END_SRC

*** menu
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)

#+END_SRC

*** cursor
#+BEGIN_SRC emacs-lisp  
  (global-hl-line-mode 1)
  (delete-selection-mode 1)
  ;;(blink-cursor-mode -1)
  (setq mouse-highlight nil)
  (setq line-move-visual t)
  (setq mode-line-compact t)
  (visual-line-mode t)
#+END_SRC

*** line/column number
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
  (column-number-mode 1)
#+END_SRC

*** font ~Iosevka~ font and ~Consolas~
- https://github.com/be5invis/Iosevka/releases
#+BEGIN_SRC emacs-lisp
  ;;(when (member "Consolas" (font-family-list))
  ;;  (set-frame-font "Consolas-13" t t))
  ;;(member "Consolas" (font-family-list))
  
  (when (member "Iosevka Fixed Slab Extended" (font-family-list))
    (set-frame-font "Iosevka Fixed Slab Extended Italic-10" t t))

  (member "Iosevka Fixed Slab Extended Italic" (font-family-list))
#+END_SRC

*** theme load
#+BEGIN_SRC emacs-lisp
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region '(bg-only no-extend))

  ;; Load the theme of your choice:
  ;; (load-theme 'modus-vivendi) ;; or (load-theme 'modus-operandi)
  (load-theme 'wheatgrass)
  (define-key global-map (kbd "<f5>") #'modus-themes-toggle)
#+END_SRC

** editor and search
*** backup disable
#+begin_src emacs-lisp
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
#+end_src

*** Icomplete Mode
#+BEGIN_SRC emacs-lisp
  ;;(fido-vertical-mode 1)
  (setq max-mini-window-height 0.5)
#+END_SRC

*** paren 
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

*** pop up new frame
#+BEGIN_SRC emacs-lisp
  ;;(setq pop-up-frames t)
  (global-set-key (kbd "C-o") 'other-frame)
  (global-set-key (kbd "<f10>") 'make-frame-command)
#+END_SRC

*** ivy mode
#+BEGIN_SRC emacs-lisp
  (ivy-mode)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  ;;;; enable this if you want `swiper' to use it
  ;;;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "<f7>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "C-x C-r") 'counsel-buffer-or-recentf)
  (global-set-key (kbd "C-s") 'swiper-isearch)
  ;;(global-set-key (kbd "<f1> f") 'counsel-describe-function)
  ;;(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  ;;(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  ;;(global-set-key (kbd "<f1> l") 'counsel-find-library)
  ;;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  ;;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  ;;(global-set-key (kbd "C-c g") 'counsel-git)
  ;;(global-set-key (kbd "C-c j") 'counsel-git-grep)
  ;;(global-set-key (kbd "C-c k") 'counsel-ag)
  ;;(global-set-key (kbd "C-x l") 'counsel-locate)
  ;;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC

*** ivy-posframe
#+begin_src  emacs-lisp
  ;(require 'ivy-posframe)
  ;; display at `ivy-posframe-style'
  ;(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
  ;(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  ;(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))

  ;(ivy-posframe-mode 1)

#+end_src

*** recentf package
#+begin_src emacs-lisp
  

#+end_src


** disable warning
#+BEGIN_SRC emacs-lisp
  (progn
    ;; stop warning prompt for some commands. There's always undo.
    (put 'narrow-to-region 'disabled nil)
    (put 'narrow-to-page 'disabled nil)
    (put 'upcase-region 'disabled nil)
    (put 'downcase-region 'disabled nil)
    (put 'erase-buffer 'disabled nil)
    (put 'scroll-left 'disabled nil)
    (put 'dired-find-alternate-file 'disabled nil)
  )

  (setq visible-bell 1) ;; sound off
#+END_SRC

** org-mode
#+BEGIN_SRC emacs-lisp
  (progn
  ;; org-mode
  (setq org-src-fontify-natively t)
  (setq org-startup-folded nil)
  (setq org-return-follows-link t)
  (setq org-startup-truncated nil)
  (setq org-startup-with-inline-images t)
  ;; indention
  (setq org-startup-indented t)
  (setq org-src-tab-acts-natively t)
  )
  (add-hook 'org-mode-hook
	    (lambda ()
	      visual-line-mode))
#+END_SRC

** book mark
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (require 'bookmark)
  (list-bookmarks)
  (switch-to-buffer "*Bookmark List*")
  ;; when bookmark is changed, automatically save it
  (setq bookmark-save-flag 1)
#+END_SRC


** key show
can know all key-binds 
#+BEGIN_SRC emacs-lisp
  (which-key-mode 1)
#+END_SRC


** program
*** yaml
- To install, just drop this file into a directory in your `load-path' and (optionally) byte-compile it.  To automatically handle files ending in '.yml'
- Unlike python-mode, this mode follows the Emacs convention of not binding the ENTER key to `newline-and-indent'.  To get this behavior, add the key definition to `yaml-mode-hook':

#+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (add-hook 'yaml-mode-hook
	    '(lambda ()
	       (define-key yaml-mode-map "\C-m" 'newline-and-indent)))

#+END_SRC
*** yasnippet 
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
  (global-set-key (kbd "C-c y i") 'yas-insert-snippet)
  (global-set-key (kbd "C-c y v") 'yas-visit-snippet-file)
  (yas-global-mode 1)

#+END_SRC



** hugo
#+begin_src emacs-lisp
  (setq easy-hugo-basedir "c:/dev/blog")
  (setq easy-hugo-url "https://incjjung.netlify.app")
  (setq easy-hugo-previewtime "300")
  (setq easy-hugo-default-ext ".org")

#+end_src




** shell cmd
#+begin_src emacs-lisp
  (setq shell-file-name "C:/Program Files/Git/bin/bash.exe")
  (setq explicit-bash-args '("--noediting" "-i"))

#+end_src

** Customer Scripts
*** hpe project
~M-x hpe-project-template~ : create new template *ORG* runbook supporting Latex.

#+begin_src emacs-lisp
  (defun hpe-project-template ()
    "HPE Project Runbook Create Templete by Inchul Jung (20220919)"
    (interactive)
    (let ((basedir (read-directory-name "base dir: " "c:/HPEDrive/OneDrive - Hewlett Packard Enterprise/Project"))
          (project_name (read-string "Project Name: "))
          (temp_runbook "~/.emacs.d/hpe_templete/runbook.org"))
      (progn 
        (format "basename: %s, projectname: %s" basedir project_name)
        (message (format "new file will be creaete in %s/%s/%s-runbook.org" basedir project_name project_name))
        (with-temp-buffer
          (insert-file-contents temp_runbook)
          ;;XX-TITLE-XX
          (goto-char (point-min))
          (while (search-forward "XX-TITLE-XX" nil t)
            (replace-match (format "%s Runbook" project_name)))

          (goto-char (point-min))
          (while (search-forward "XX-PROJECT-NAME-XX" nil t)
            (replace-match project_name))
          (write-file (format "%s/%s/%s-runbook.org" basedir project_name project_name)))
        (find-file (format "%s/%s/%s-runbook.org" basedir project_name project_name)))))
#+end_src
*** search with current point word
with ~<f8>~ key, you can search a word on current curser
#+begin_src emacs-lisp
  (defun inchul-search-current-word ()
    "Call `swiper-isearch' on current word or text selection. This is based on `xah-search-current-word' function. (URL `http://xahlee.info/emacs/emacs/modernization_isearch.html')
  Version 2022-09-22"
    (interactive)
    (let ( $p1 $p2 )
      (if (use-region-p)
          (progn
            (setq $p1 (region-beginning))
            (setq $p2 (region-end)))
        (save-excursion
          (skip-chars-backward "-_A-Za-z0-9")
          (setq $p1 (point))
          (right-char)
          (skip-chars-forward "-_A-Za-z0-9")
          (setq $p2 (point))))
      (setq mark-active nil)
      (when (< $p1 (point))
        (goto-char $p1))
      ;;(ivy-mode)
      (swiper-isearch (buffer-substring-no-properties $p1 $p2))))

  (global-set-key (kbd "<f8>") 'inchul-search-current-word)
#+end_src
*** google search
#+begin_src emacs-lisp
  (require 'browse-url) ; part of gnu emacs

  (defun my-lookup-mapr ()
    "Look up the word under cursor in google mapr sites. This command switches to browser."
    (interactive)
    (let (word)
      (setq word
            (if (use-region-p)
                (buffer-substring-no-properties (region-beginning) (region-end))
              (current-word)))
      (setq word (replace-regexp-in-string " " "+" word))

      ;;(browse-url (concat "http://en.wikipedia.org/wiki/" word))
      (browse-url (concat "https://www.google.com/search?q=site%3Adocs.datafabric.hpe.com%2F71+" word))
      ;; (eww myUrl) ; emacs's own browser
      ))
  (global-set-key (kbd "<f9>") 'my-lookup-mapr)
#+end_src

