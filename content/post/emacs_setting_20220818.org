---
title: "Emacs setting 202208 (init)"
date: 2022-08-18T09:04:03+12:00
draft: false
---

어느날 왜인지 모르지만 (분명히 뭔가를 했긴 했는데) 나의 이맥스 설정이 초기화 되어 버렸다 하얏게. 나는 도저히 이해를 못하겠지만 뭔가 작업을 하고 있었는데 왜 내 설정을 날려벼렸을까 모르겠다.

그래서 어쩔 수 없이 또다시 하나씩 하나씩 설정을 해나가다 이번엔 =org-mdoe= 로 ~init.el~ 을 만들어야지 하고 검색해서 지금 쓰고 있다.

또 날라갈 수도 있고 그래서 일단 =Github=에 올릴까 생각 중이다. 아직 다 설정이 끝난것은 아니지만 우선 이곳에 올려두고 나중에 두고두고 써야 겠다.

일단 지금 상태는 이렇다. 

* General
** Repository
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "https://melpa.org/packages/")
   t)
#+END_SRC
** initial window and default window
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)

  (setq default-frame-alist
        (if (display-graphic-p)
            '((tool-bar-lines . 0)
              ;;(background-color . "honeydew")
              (width . 100)
              (height . 46))
          '((tool-bar-lines . 0))))
#+END_SRC

** menu
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)

#+END_SRC

** cursor
#+BEGIN_SRC emacs-lisp  
  (global-hl-line-mode 1)
  (delete-selection-mode 1)
  ;;(blink-cursor-mode -1)
  (setq mouse-highlight nil)
  (setq line-move-visual t)
  (setq mode-line-compact t)
#+END_SRC

** column number
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC

** font ~Consolas~
#+BEGIN_SRC emacs-lisp
  (when (member "Consolas" (font-family-list))
    (set-frame-font "Consolas-13" t t))
  (member "Consolas" (font-family-list))
#+END_SRC

** theme load
#+BEGIN_SRC emacs-lisp
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region '(bg-only no-extend))

  ;; Load the theme of your choice:
  (load-theme 'modus-vivendi) ;; or (load-theme 'modus-operandi)

  (define-key global-map (kbd "<f5>") #'modus-themes-toggle)
#+END_SRC

* editor and search
** backup disable
#+begin_src emacs-lisp
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
#+end_src

** Icomplete Mode
#+BEGIN_SRC emacs-lisp
  ;;(fido-vertical-mode 1)
  (setq max-mini-window-height 0.5)
#+END_SRC

** paren 
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** pop up new frame
#+BEGIN_SRC emacs-lisp
  ;;(setq pop-up-frames t)
#+END_SRC

** ivy mode
#+BEGIN_SRC emacs-lisp
  (ivy-mode)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  ;;;; enable this if you want `swiper' to use it
  ;;;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "C-s") 'swiper-isearch)
  ;;(global-set-key (kbd "<f1> f") 'counsel-describe-function)
  ;;(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  ;;(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  ;;(global-set-key (kbd "<f1> l") 'counsel-find-library)
  ;;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  ;;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  ;;(global-set-key (kbd "C-c g") 'counsel-git)
  ;;(global-set-key (kbd "C-c j") 'counsel-git-grep)
  ;;(global-set-key (kbd "C-c k") 'counsel-ag)
  ;;(global-set-key (kbd "C-x l") 'counsel-locate)
  ;;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC

** ivy-posframe
#+begin_src  emacs-lisp
  (require 'ivy-posframe)
  ;; display at `ivy-posframe-style'
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))

  (ivy-posframe-mode 1)

#+end_src



* disable warning
#+BEGIN_SRC emacs-lisp
  (progn
    ;; stop warning prompt for some commands. There's always undo.
    (put 'narrow-to-region 'disabled nil)
    (put 'narrow-to-page 'disabled nil)
    (put 'upcase-region 'disabled nil)
    (put 'downcase-region 'disabled nil)
    (put 'erase-buffer 'disabled nil)
    (put 'scroll-left 'disabled nil)
    (put 'dired-find-alternate-file 'disabled nil)
  )
#+END_SRC

* org-mode
#+BEGIN_SRC emacs-lisp
  (progn
  ;; org-mode
  (setq org-src-fontify-natively t)
  (setq org-startup-folded nil)
  (setq org-return-follows-link t)
  (setq org-startup-truncated nil)
  (setq org-startup-with-inline-images t)
  ;; indention
  (setq org-startup-indented t)
  (setq org-src-tab-acts-natively t)
  )

  (add-hook 'org-mode-hook
	    (lambda ()
	      visual-line-mode))
#+END_SRC

* book mark
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (require 'bookmark)
  (list-bookmarks)
  (switch-to-buffer "*Bookmark List*")
  ;; when bookmark is changed, automatically save it
  (setq bookmark-save-flag 1)
#+END_SRC


* key show
can know all key-binds 
#+BEGIN_SRC emacs-lisp
  (which-key-mode 1)
#+END_SRC


* program
** yaml
- To install, just drop this file into a directory in your `load-path' and (optionally) byte-compile it.  To automatically handle files ending in '.yml'
- Unlike python-mode, this mode follows the Emacs convention of not binding the ENTER key to `newline-and-indent'.  To get this behavior, add the key definition to `yaml-mode-hook':

#+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (add-hook 'yaml-mode-hook
	    '(lambda ()
	       (define-key yaml-mode-map "\C-m" 'newline-and-indent)))

#+END_SRC
** yasnippet 
#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
#+END_SRC



* hugo
#+begin_src emacs-lisp
  (setq easy-hugo-basedir "c:/dev/blog")
  (setq easy-hugo-url "https://incjjung.netlify.app")
  (setq easy-hugo-previewtime "300")
  (setq easy-hugo-default-ext ".org")

#+end_src


