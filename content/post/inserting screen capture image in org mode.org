---
title: "Inserting Screen Capture Image into Org Mode"
date: 2024-12-21T12:32:31+13:00
draft: false
---

* Introduction
I developed a function to insert image into my org-mode when I take a screen capture. Additionally, it can put capture and name for reference later. 

#+begin_example
   #+CAPTION: This is the caption for the next figure link (or table)
   #+NAME:   fig:SED-HR4049
   [[./img/a.jpg]]
#+end_example

#+CAPTION: caption name here
[[./img/Screenshot_2024-12-21_121424.jpg]]


* working flow
1) take a screen capture with ~Window key~ + ~shift~ + ~s~ and save it in your directory

2) get inputs from user with ~M-x my-capture-orgmode~
   - CAPTION (for title)
   - NAME (for link)
   #+begin_src elisp 
     (read-string "CAPTURE: ")
     (read-string "NAME: ")
   #+end_src
  
3) make a =img= directory in the working directory
    create a directory, =img= if not existing
    ~(make-directory DIR &optional PARENTS)~
    ~(directory-files DIRECTORY &optional FULL MATCH NOSORT COUNT)~
    ~(directory-files-and-attributes DIRECTORY &optional FULL MATCH NOSORT ID-FORMAT COUNT)~

4) bring the image location into org-mode file location
   - assume the latest image file is the target file
   - copy image from the window location and delete it
     ~(rename-file FILE NEWNAME &optional OK-IF-ALREADY-EXISTS)~
     ~(file-name-nondirectory FILENAME)~
5) insert image link in current position
  #+begin_example
     #+CAPTION: This is the caption for the next figure link (or table)
     #+NAME:   fig:SED-HR4049
     [[./img/a.jpg]]
  #+end_example
6) run ~org-redisplay-inline-images~
      
* user configure variables
- default image size  in org mode
#+begin_src elisp
    (setq org-image-actual-width (list 800))
#+end_src

- make my directory in ~C:\Users\<myname>\Pictures\ScreenCapture~
- soft link 
#+begin_src bash
  ln -s /mnt/c/Users/<myname>/Pictures/ScreenCapture/ wincapturedir
#+end_src
- define variables
#+begin_src elisp
  (defvar win-snipping-location "~/wincapturedir" "It's just promise for myself. The Windows Snipping Tool in Windows 11 supports automatic saving of screenshots, but the Snipping Tool in Windows 10 doesn't support automatic saving.")

  (defvar my-org-image-location "./img" "img directory will be created if not existing in curruent working directory")
#+end_src

** reflesh inline image in org-mode
~org-redisplay-inline-images~
- org-redisplay-inline-images: Assure display of inline images and refresh them.
~org-toggle-inline-images~ with C-c C-x C-v: Toggle the display of inline images.

* source
#+begin_src elisp
  (defvar win-snipping-location "~/wincapturedir" "It's just promise for myself. The Windows Snipping Tool in Windows 11 supports automatic saving of screenshots, but the Snipping Tool in Windows 10 doesn't support automatic saving.")

  (defvar my-org-image-location "./img" "img directory will be created if not existing in curruent working directory")

 
  (defun my-capture-orgmode ()
    "insert my latest capture image into orgmode"
    (interactive)
    (let* ((caption (read-string "CAPTION: "))
           (name (read-string "NAME: "))
           (src (car
                (mapcar #'car
                        (sort (directory-files-and-attributes win-snipping-location t "\\.png$\\|\\.jpg$")
                              #'(lambda (x y) (time-less-p (nth 6 y) (nth 6 x)))))))
	 
           (dst (string-replace
               " " "_" (file-name-concat my-org-image-location (file-name-nondirectory src)))))
      (if (not (file-directory-p my-org-image-location))
          (make-directory my-org-image-location))
    
      (message "%s ==> %s" src  dst)
      (rename-file src dst)
      (and (> (length caption) 0) (insert (format "#+CAPTION: %s\n" caption)))
      (and (> (length name) 0) (insert (format "#+NAME: %s\n" name)))
      (insert (format "[[%s]]\n" dst))
      (org-redisplay-inline-images)))
#+end_src


