---
title: "Org Agenda Integration With Outlook Calendar"
date: 2025-05-02T15:47:53+12:00
draft: false
---

* Introduction
Email and Calendar are (I think) the mostly musthave toolkit for a workflow. As Emacs user, I add emacs into it. Specially org-agenda. What if I integrate a calendar and org-agenda? It would be fantastic. (Hey, Let's forget email integration, I think GUI email client is better than emacs interface).

Speaking of the integration, it's depending on your situation. Google calendar is yours? Google it, you might find a script to do it already. In my case, I should use Outlook 365 Calendar. It's hard to get my calendar events and put into my =org-agenda=. I hope this post can help any one if you want to do same journey like me. 

The easiest way what I found is the Microsoft Graph API to access your calendar events. Actually, you can access the most data across Microsoft 365 services by it.

Long story short, you must do some prerequisites steps. 
* Prerequisites for accessing my Calendar
** register my client id and secret for microsoft graph service
I won't put down all detail here. I believe you can do it yourself, here are the steps
1.  *Register an application:* Go to the /Microsoft Entra Potal/ =https://entra.microsoft.com/= and register a new application.
2.  *Configure authentication:* Set up redirect URIs for your application.
3.  *Generate a client secret:* Create a client secret in the "Certificates & secrets" section.
    Treat this secret like a password!
4.  *Note the IDs:* Record the Application (client) ID and the Directory (tenant) ID from the application overview page. Also record the client secret you generated.

You'll use the Application (client) ID, Directory (tenant) ID, and the client secret in your code to authenticate with Microsoft Graph.

** get my authorization code
Maybe you need understand the basic OAuth 2.0. Be patient and no worry, ~Python SDK~ will work the tedious parts for you once you get your authorization code. 

1. Construct the Authorization URL:
   #+begin_src bash
     CLIENT_ID="xxxxxxxxxxxxxxxxxxx"
     CLIENT_SECRET="secret"
     AUTHORITY="https://login.microsoftonline.com/tenantID/oauth2/v2.0/authorize"
     REDIRECT_URI="http://localhost:8080" # Or a suitable redirect URI you configured
     RESPONSE_TYPE="code"
     SCOPE="Calendars.Read"
    #+end_src
   =Calendars.Read= is the minimum scope to read your calendar list. If you need to create, update, or delete calendars, you'll need additional scopes. Make sure your application registration includes the necessary scopes when you register in the Microsfot Entra Potal.
   Let's construct the full authorization URL:
   #+begin_src bash
     AUTH_URL="${AUTHORITY}?client_id=${CLIENT_ID}&response_type=${RESPONSE_TYPE}&redirect_uri=${REDIRECT_URI}&scope=${SCOPE}&response_mode=query"
     echo "$AUTH_URL"
   #+end_src
2. Open the URL in a Browser and copy the echoed the =AUTH_URL= and paste it into a web browser. You will be prompted to log in with your Microsoft account and grant permissions to your application.
   - After granting permissions, you will be redirected to your =REDIRECT_URI= (e.g., =http://localhost=) with an authorization code in the URL's query parameters. Extract the value of the =code= parameter. For example: =http://localhost/?code=YOUR_AUTHORIZATION_CODE&...=
   - You need a your local web server to get this =REDIRECT_URI= and =YOUR_AUTHORIZATION_CODE= within the query parameters. 
   Now you have the =AUTHORIZATION CODE=.
* Let's get my Calendar events
1. Install  a Microsoft Graph SDK
   #+begin_src bash
     pip install msgraph-sdk
   #+end_src
2. code
   #+begin_src python
     from msgraph import GraphServiceClient
     from azure.identity.aio import AuthorizationCodeCredential
     from msgraph.generated.users.item.calendar_view.calendar_view_request_builder import CalendarViewRequestBuilder
     from kiota_abstractions.base_request_configuration import RequestConfiguration
     import asyncio

     scopes = ['User.Read', 'Calendars.Read','Calendars.ReadBasic']

     tenant_id = 'xxxxxxxxxxxxxxxx'
     client_id = 'xxxxxxxxxxxxxxxxx'
     client_secret = 'xxxxxxxx'
     redirect_uri = 'http://localhost:8080' # you may need your own http server to get the auth code
     authorization_code = 'MY_AUTHOIZATIONCODE'

     credential = AuthorizationCodeCredential(
         tenant_id=tenant_id,
         client_id=client_id,
         authorization_code=authorization_code,
         redirect_uri=redirect_uri,
         client_secret=client_secret)

     graph_client = GraphServiceClient(credential, scopes) 
     query_params = CalendarViewRequestBuilder.CalendarViewRequestBuilderGetQueryParameters(
     		start_date_time = "2025-04-29T04:45:17.097Z",
     		end_date_time =  "2025-05-02T04:45:17.097Z",
     )
     request_configuration = RequestConfiguration(query_parameters = query_params,)

     async def get_events():
         events = await graph_client.me.calendar_view.get(request_configuration = request_configuration)
         if events:
             for e in events.value:
                 print(e)
     asyncio.run(get_events())        
   #+end_src
   
Congratulation! You can see your calendar events.

* Integration with org-agenda
You may know how the org-agenda works. You must decide the agenda file for you events. Make the event format in your agenda file. I created a script to overwrite my agenda file with my events. boom!


